//BY BUTTBURGER 8/07/2023 MOTHERLODE GROUND AND INVENTORY MARKER
//PLUGINS BORROWED AND REARRANGED: groundmarkers, motherlode, wintertodt
package net.runelite.client.plugins.myMotherlodeMarker;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Multiset;
import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;


import lombok.*;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.*;
import net.runelite.client.config.ConfigGroup;
import net.runelite.client.events.ConfigChanged;

import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.AgilityShortcut;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
//import net.runelite.client.plugins.agility.Obstacle;
import net.runelite.client.plugins.entityhider.EntityHiderConfig;
import net.runelite.client.plugins.fps.FpsDrawListener;
import net.runelite.client.plugins.motherlode.MotherlodeSession;
import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillConfig;
import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillOverlay;
//import net.runelite.client.plugins.wintertodt.WintertodtActivity;
//import net.runelite.client.plugins.wintertodt.WintertodtInterruptType;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.*;


import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.TileItem;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

import static net.runelite.api.ObjectID.*;
import static net.runelite.api.ObjectID.ORE_VEIN_26664;


@PluginDescriptor(
        name = "Custom Tile Motherlode",
        description = "Highlight the tile you are currently moving to",
        tags = {"highlight", "overlay"},
        enabledByDefault = false
)


public class myMotherlodeMarkerPlugin extends Plugin
{
    //@Getter
    //private final List<Tile> marksOfGrace = new ArrayList<>();

    private static final Set<Integer> MINE_SPOTS = ImmutableSet.of(//ORE_VEIN_26661,
            ORE_VEIN, ORE_VEIN_26662, ORE_VEIN_26663, ORE_VEIN_26664);
    private static final Set<Integer> DEPLETED_SPOTS = ImmutableSet.of(DEPLETED_VEIN_26665, DEPLETED_VEIN_26666, DEPLETED_VEIN_26667, DEPLETED_VEIN_26668);

    private static final Set<Integer> MLM_ORE_TYPES = ImmutableSet.of(ItemID.RUNITE_ORE, ItemID.ADAMANTITE_ORE,
            ItemID.MITHRIL_ORE, ItemID.GOLD_ORE, ItemID.COAL, ItemID.GOLDEN_NUGGET);

    private static final int SACK_LARGE_SIZE = 162;
    private static final int SACK_SIZE = 81;
    private static final int MAX_INVENTORY_SIZE = 28;

    @Inject
    private Client client;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private myMotherlodeMarkerOverlay overlay;



    @Getter(AccessLevel.PACKAGE)
    private int curSackSize;
    @Getter(AccessLevel.PACKAGE)
    private int maxSackSize;
    @Getter(AccessLevel.PACKAGE)
    private Integer depositsLeft;
    @Inject
    private MotherlodeSession session;
    private boolean shouldUpdateOres;
    private Multiset<Integer> inventorySnapshot;



    @Getter(AccessLevel.PACKAGE)
    private final Set<WallObject> veins = new HashSet<>();
    @Getter(AccessLevel.PACKAGE)
    private final Set<GameObject> rocks = new HashSet<>();
    @Getter(AccessLevel.PACKAGE)
    private final Set<GameObject> brokenStruts = new HashSet<>();



    @Provides
    net.runelite.client.plugins.myMotherlodeMarker.myMotherlodeMarkerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(myMotherlodeMarkerConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
    }


    @Subscribe
    public void onItemSpawned(ItemSpawned itemSpawned)
    {
        final TileItem item = itemSpawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            WorldPoint wp = itemSpawned.getTile().getWorldLocation();
            Player player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.addIgnoreTile(wp);
                }
                else
                {
                    //mogSession.addMarkTile(wp, item.getQuantity());
                    //mSession.addMarkTest(wp);
                    overlay.reloadScan(itemSpawned);
                }
            }
            // mSession.addMarkTest(wp);
        }
    }


    @Subscribe
    public void onItemDespawned(ItemDespawned itemDespawned)
    {
        final TileItem item = itemDespawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            WorldPoint wp = itemDespawned.getTile().getWorldLocation();
            Player player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.removeIgnoreTile(wp);
                }
                //mogSession.removeMarkTile(wp);
                overlay.graceDespawned();
            }
        }
    }

    @Subscribe
    public void onWallObjectSpawned(WallObjectSpawned event)
    {
        WallObject wallObject = event.getWallObject();
        if (MINE_SPOTS.contains(wallObject.getId()))
        {
            veins.add(wallObject);
            //WorldPoint wp = itemDespawned.getTile().getWorldLocation();
            WorldPoint wp1 = wallObject.getWorldLocation();
            overlay.rescanWallNode(wp1);
        }
        veins.add(wallObject);
    }

    @Subscribe
    public void onWallObjectDespawned(WallObjectDespawned event)
    {
        WallObject wallObject = event.getWallObject();
        //veins.remove(wallObject);
        /*
        if (DEPLETED_SPOTS.contains(wallObject.getId()))
        {
            veins.remove(wallObject);
            WorldPoint wp2 = wallObject.getWorldLocation();
            overlay.rescanWallNode(wp2);
        }
        */
        veins.remove(wallObject);
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned gObjSpawn)
    {
        GameObject gameObj = gObjSpawn.getGameObject();
        WorldPoint wp1 = gameObj.getWorldLocation();
        LocalPoint lp1 = LocalPoint.fromWorld(client, wp1);

        final LocalPoint strut1 = LocalPoint.fromWorld(client, 3742, 5669);
        final LocalPoint strut2 = LocalPoint.fromWorld(client, 3742, 5663);

        //ROCKS_11387 GRANITE
        //ROCKS_11391 DEPLETED

        //RENAMED GRANITE_ROCKS
        //if(ROCKS_11387 == gameObj.getId()) {//GRANITE ROCK
        //if(GRANITE_ROCKS == gameObj.getId()) {//GRANITE ROCK
            //overlay.scanGraniteSpawn(lp1, 1);
        //}
        //if(ROCKS_11391 == gameObj.getId()) {//DEPLETED ROCK
            //overlay.scanGraniteSpawn(lp1, 2);
        //}

        if(gameObj.getId() == STRUT)
        {
            /*
            if(lp1.equals(strut1))
            {
                overlay.strut1Repair = 0;
            }
            if(lp1.equals(strut2))
            {
                overlay.strut2Repair = 0;
            }
             */
            overlay.fixStrutSpawn(lp1);
        }
        if(gameObj.getId() == BROKEN_STRUT)
        {
            /*
            if(lp1.equals(strut1))
            {
                overlay.strut1Repair = 1;
            }
            if(lp1.equals(strut2))
            {
                overlay.strut2Repair = 1;
            }
             */
            overlay.fixStrutDespawn(lp1);
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned gObjDeSpawn)
    {
        GameObject gameObj = gObjDeSpawn.getGameObject();
        WorldPoint wp2 = gameObj.getWorldLocation();
        LocalPoint lp2 = LocalPoint.fromWorld(client, wp2);
        //ROCKS_11387 GRANITE
        //ROCKS_11391 DEPLETED

        if(gameObj.getId() == ROCKS_11391) {//DEPLETED ROCK
            //WorldPoint wp3 = gObjDeSpawn.getTile().getWorldLocation();
            //Player player = client.getLocalPlayer();

            //overlay.scanGraniteSpawn(lp2, 0);//SET TO 0
        }

        //if(gameObj.getId() == ROCKS_11387) {//GRANITE ROCK
        //if(gameObj.getId() == GRANITE_ROCKS) {//GRANITE ROCK
            //WorldPoint wp4 = gObjDeSpawn.getTile().getWorldLocation();
            //Player player = client.getLocalPlayer();

            //overlay.scanGraniteSpawn(lp2, 1);
        //}

        /*
        if(gameObj.getId() == STRUT)//BROKEN_STRUT
        {
            final LocalPoint strut1 = LocalPoint.fromWorld(client, 3742, 5669);
            final LocalPoint strut2 = LocalPoint.fromWorld(client, 3742, 5663);
            if(lp2.equals(strut1))
            {
                overlay.strut1Repair = 1;
            }
            if(lp2.equals(strut2))
            {
                overlay.strut2Repair = 1;
            }
            //overlay.fixStrutDespawn(lp2);
        }
         */
    }



    //FROM WINTERTODT PLUGIN
    @Subscribe
    public void onChatMessage(ChatMessage chatMessage)
    {
        ChatMessageType chatMessageType = chatMessage.getType();

        if (chatMessageType != ChatMessageType.GAMEMESSAGE && chatMessageType != ChatMessageType.SPAM)
        {
            return;
        }

        MessageNode messageNode = chatMessage.getMessageNode();

        if (messageNode.getValue().startsWith("You swing your pick at the rock"))
        {
            overlay.scanGraniteSpawn();
        }
    }



    private void refreshSackValues()
    {
        curSackSize = client.getVarbitValue(Varbits.SACK_NUMBER);
        boolean sackUpgraded = client.getVarbitValue(Varbits.SACK_UPGRADED) == 1;
        maxSackSize = sackUpgraded ? SACK_LARGE_SIZE : SACK_SIZE;
    }



    @Subscribe
    public void onVarbitChanged(VarbitChanged event)
    {
        int lastSackValue = curSackSize;
        refreshSackValues();
        shouldUpdateOres = curSackSize < lastSackValue;
        if (shouldUpdateOres) {
            // Take a snapshot of the inventory before the new ore is added.
            ItemContainer itemContainer = client.getItemContainer(InventoryID.INVENTORY);
            if (itemContainer != null) {
                inventorySnapshot = HashMultiset.create();
                Arrays.stream(itemContainer.getItems())
                        .filter(item -> MLM_ORE_TYPES.contains(item.getId()))
                        .forEach(item -> inventorySnapshot.add(item.getId(), item.getQuantity()));
            }
        }
    }


    //private Integer calculateDepositsLeft()
    public Integer calculateDepositsLeft()
    {
        if (maxSackSize == 0) // check if maxSackSize has been initialized
        {
            refreshSackValues();
        }

        double depositsLeft = 0;
        int nonPayDirtItems = 0;

        ItemContainer inventory = client.getItemContainer(InventoryID.INVENTORY);
        if (inventory == null)
        {
            return null;
        }

        Item[] result = inventory.getItems();
        assert result != null;

        for (Item item : result)
        {
            // Assume that MLM ores are being banked and exclude them from the check,
            // so the user doesn't see the Overlay switch between deposits left and N/A.
            //
            // Count other items at nonPayDirtItems so depositsLeft is calculated accordingly.
            if (item.getId() != ItemID.PAYDIRT && item.getId() != -1)// && !MLM_ORE_TYPES.contains(item.getId()))
            {
                nonPayDirtItems += 1;
            }
        }

        double inventorySpace = MAX_INVENTORY_SIZE - nonPayDirtItems;
        double sackSizeRemaining = maxSackSize - curSackSize;

        if (inventorySpace > 0 && sackSizeRemaining > 0)
        {
            depositsLeft = Math.ceil(sackSizeRemaining / inventorySpace);
        }
        /*
        else if (inventorySpace == 0)
        {
            return null;
        }
         */

        return (int) depositsLeft;
    }
}
