//BY BUTTBURGER 8/07/2023 MOTHERLODE GROUND AND INVENTORY MARKER
//PLUGINS BORROWED AND REARRANGED: groundmarkers, motherlode, wintertodt
package net.runelite.client.plugins.myMotherlodeMarker;

import java.awt.*;
import javax.inject.Inject;
import java.util.Timer;
import java.util.TimerTask;

import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.widgets.Widget;
import net.runelite.api.widgets.WidgetInfo;
import net.runelite.api.widgets.WidgetItem;
import net.runelite.api.widgets.WidgetType;
//import net.runelite.client.plugins.inventorytags.Tag;
import net.runelite.client.plugins.motherlode.MotherlodeConfig;
import net.runelite.client.plugins.motherlode.MotherlodePlugin;
import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillConfig;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;
import java.awt.image.BufferedImage;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import javax.inject.Inject;
import net.runelite.api.Client;
import net.runelite.api.GameState;
import net.runelite.api.InventoryID;
import net.runelite.api.Item;
import net.runelite.api.ItemContainer;


import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;


import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Value;
import net.runelite.api.*;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.events.FocusChanged;

import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.AgilityShortcut;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
//import net.runelite.client.plugins.agility.Obstacle;
import net.runelite.client.plugins.entityhider.EntityHiderConfig;
import net.runelite.client.plugins.fps.FpsDrawListener;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.TileItem;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

import static net.runelite.api.ItemID.*;



public class myMotherlodeMarkerOverlay extends Overlay
{
    private final Client client;
    private final net.runelite.client.plugins.myMotherlodeMarker.myMotherlodeMarkerConfig config;
    private final net.runelite.client.plugins.myMotherlodeMarker.myMotherlodeMarkerPlugin plugin;

    @Inject
    private myMotherlodeMarkerOverlay(Client client, myMotherlodeMarkerPlugin plugin, myMotherlodeMarkerConfig config)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        //setPosition(OverlayPosition.DYNAMIC);
        //setLayer(OverlayLayer.ABOVE_SCENE);
        //setPriority(OverlayPriority.MED);

        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_WIDGETS);
        setPriority(OverlayPriority.HIGH);
    }

    WorldPoint wp;
    Player player;
    int scanGrace;
    LocalPoint localGrace;
    int level2path;
    int level3path;
    int movedLevel;
    int myX;
    int myY;

    int drawGranite;
    int phaseGranite;
    int graniteValue;
    LocalPoint lGranite;
    WorldPoint wGranite;

    int my2Dx;
    int my2Dy;
    int my2Dwidth;
    int my2Dheight;

    //MOTHERLODE
    private static final int MAX_INVENTORY_SIZE = 28;
    //private static final int SACK_LARGE_SIZE = 162;
    //private static final int SACK_SIZE = 81;
    private static final int UPPER_FLOOR_HEIGHT = -490;
    private static final int MAX_DISTANCE = 2350;
    private static final int IMAGE_Z_OFFSET = 20;
    int floorHeight;
    int sackNumber;
    int isBankHighlighted;
    int hasPaydirt;
    int isSackHighlighted;
    int isHammerHighlighted;
    int strut1Repair;
    int strut2Repair;
    int drawStrut1;
    int drawStrut2;
    LocalPoint miningNode;
    int miningNodeID;
    int testValue;

    int testChange;
    int lastNode;

    int setTimer;

    int test2D;

    int invSlot;
    int splitCounterX;
    int splitCounterY;



    void reloadScan(ItemSpawned itemSpawned)
    {
        final TileItem item = itemSpawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            wp = itemSpawned.getTile().getWorldLocation();
            player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.addIgnoreTile(wp);
                }
                else
                {
                    //mogSession.addMarkTile(wp, item.getQuantity());
                    //mSession.addMarkTest(wp);//DO_NOT_USE
                    //reloadConfig();
                    scanGrace = 1;
                    localGrace = LocalPoint.fromWorld(client, wp);
                }
            }
        }
    }



    void graceDespawned() {
        scanGrace = 0;
    }



    //void scanGraniteSpawn(LocalPoint graniteLP, int graniteValue) {
    void scanGraniteSpawn() {
        //OLD
        //final LocalPoint lGraniteR1 = LocalPoint.fromWorld(client, 3172, 2903);
        //final LocalPoint lGraniteR2 = LocalPoint.fromWorld(client, 3172, 2902);
        //final LocalPoint lGraniteL1 = LocalPoint.fromWorld(client, 3168, 2903);
        //final LocalPoint lGraniteL2 = LocalPoint.fromWorld(client, 3168, 2904);

        final LocalPoint lGraniteR1 = LocalPoint.fromWorld(client, 3167, 2911);
        final LocalPoint lGraniteR2 = LocalPoint.fromWorld(client, 3165, 2910);
        final LocalPoint lGraniteL1 = LocalPoint.fromWorld(client, 3165, 2909);
        final LocalPoint lGraniteL2 = LocalPoint.fromWorld(client, 3165, 2908);

        phaseGranite += 1;

        //START WITH R1, THEN R2, THEN L1, THEN L2, THEN LOOP
        if(phaseGranite == 0) {//R1
            lGranite = lGraniteR1;
        }
        if(phaseGranite == 1) {//R2
            lGranite = lGraniteR2;
        }
        if(phaseGranite == 2) {//L1
            lGranite = lGraniteL1;
        }
        if(phaseGranite == 3) {//L2
            lGranite = lGraniteL2;
        }
        //BACK TO FIRST NODE
        if(phaseGranite == 4) {
            lGranite = lGraniteR1;
            phaseGranite = 0;
        }

        /*
        //START WITH R1, THEN R2, THEN L1, THEN L2, THEN LOOP
        if(phaseGranite == 0) {//R1
            if(graniteValue == 1 && graniteLP.equals(lGraniteR1)) {//VEINS
                //drawGranite = 1;
                lGranite = lGraniteR1;
            }
            if(graniteValue == 2 && graniteLP.equals(lGraniteR1)) {//DEPLETED
                //drawGranite = 0;
                phaseGranite = 1;
                lGranite = lGraniteR2;
            }
        }
        if(phaseGranite == 1) {//R2
            if(graniteValue == 1 && graniteLP.equals(lGraniteR2)) {//VEINS
                //drawGranite = 1;
                lGranite = lGraniteR2;
            }
            if(graniteValue == 2 && graniteLP.equals(lGraniteR2)) {//DEPLETED
                //drawGranite = 0;
                phaseGranite = 2;
                lGranite = lGraniteL1;
            }
        }

        if(phaseGranite == 2) {//L1
            if(graniteValue == 1 && graniteLP.equals(lGraniteL1)) {//VEINS
                //drawGranite = 1;
                lGranite = lGraniteL1;
            }
            if(graniteValue == 2 && graniteLP.equals(lGraniteL1)) {//DEPLETED
                //drawGranite = 0;
                phaseGranite = 3;
                lGranite = lGraniteL2;
            }
        }

        if(phaseGranite == 3) {//L2
            if(graniteValue == 1 && graniteLP.equals(lGraniteL2)) {//VEINS
                //drawGranite = 1;
                lGranite = lGraniteL2;
            }
            if(graniteValue == 2 && graniteLP.equals(lGraniteL2)) {//DEPLETED
                //drawGranite = 0;
                phaseGranite = 0;
                lGranite = lGraniteR1;
            }
        }
         */
    }



    void rescanWallNode(WorldPoint wp)
    {
        final LocalPoint lp = LocalPoint.fromWorld(client, wp);

        final LocalPoint nodeL1 = LocalPoint.fromWorld(client, 3755,5677);//26661

        final LocalPoint nodeL2 = LocalPoint.fromWorld(client, 3754,5678);//26661
        final LocalPoint nodeL3 = LocalPoint.fromWorld(client, 3753,5680);//26661

        final LocalPoint nodeL4 = LocalPoint.fromWorld(client, 3751,5680);//26662
        final LocalPoint nodeL5 = LocalPoint.fromWorld(client, 3751,5681);//26664

        final LocalPoint nodeL6 = LocalPoint.fromWorld(client, 3754,5682);//26664
        final LocalPoint nodeL7 = LocalPoint.fromWorld(client, 3754,5683);//26662

        final LocalPoint nodeL8 = LocalPoint.fromWorld(client, 3753,5684);//26664
        final LocalPoint nodeL9 = LocalPoint.fromWorld(client, 3752,5684);//26662

        final LocalPoint nodeL10 = LocalPoint.fromWorld(client, 3750,5682);//26662
        final LocalPoint nodeL11 = LocalPoint.fromWorld(client, 3749,5682);//26663
        final LocalPoint nodeL12 = LocalPoint.fromWorld(client, 3748,5682);//26664
        final LocalPoint nodeL13 = LocalPoint.fromWorld(client, 3747,5683);//26661

        final LocalPoint nodeR1 = LocalPoint.fromWorld(client, 3758,5675);//26661
        final LocalPoint nodeR2 = LocalPoint.fromWorld(client, 3759,5674);//26662
        final LocalPoint nodeR3 = LocalPoint.fromWorld(client, 3760,5674);//26663
        final LocalPoint nodeR4 = LocalPoint.fromWorld(client, 3761,5674);//26664
        final LocalPoint nodeR5 = LocalPoint.fromWorld(client, 3762,5673);//26662
        final LocalPoint nodeR6 = LocalPoint.fromWorld(client, 3762,5672);//26663
        final LocalPoint nodeR7 = LocalPoint.fromWorld(client, 3762,5671);//26663
        final LocalPoint nodeR8 = LocalPoint.fromWorld(client, 3762,5670);//26664



        if(miningNodeID != 0)
        {
            if (lp.equals(nodeL1) && testChange == 1) {miningNode = nodeL1; miningNodeID = 1;}
            else if (lp.equals(nodeL2) && testChange == 2) {miningNode = nodeL2; miningNodeID = 2;}
            else if (lp.equals(nodeL3) && testChange == 3) {miningNode = nodeL3; miningNodeID = 3;}
            else if (lp.equals(nodeL4) && testChange == 4) {miningNode = nodeL4; miningNodeID = 4;}
            else if (lp.equals(nodeL5) && testChange == 5) {miningNode = nodeL5; miningNodeID = 5;}
            else if (lp.equals(nodeL6) && testChange == 6) {miningNode = nodeL6; miningNodeID = 6;}
            else if (lp.equals(nodeL7) && testChange == 7) {miningNode = nodeL7; miningNodeID = 7;}
            else if (lp.equals(nodeL8) && testChange == 8) {miningNode = nodeL8; miningNodeID = 8;}
            else if (lp.equals(nodeL9) && testChange == 9) {miningNode = nodeL9; miningNodeID = 9;}
            else if (lp.equals(nodeL10) && testChange == 10) {miningNode = nodeL10; miningNodeID = 10;}
            else if (lp.equals(nodeL11) && testChange == 11) {miningNode = nodeL11; miningNodeID = 11;}
            else if (lp.equals(nodeL12) && testChange == 12) {miningNode = nodeL12; miningNodeID = 12;}
            else if (lp.equals(nodeL13) && testChange == 13) {miningNode = nodeL13; miningNodeID = 13;}
        }
    }



    boolean isUpstairs(LocalPoint localPoint)
    {
        return Perspective.getTileHeight(client, localPoint, 0) < UPPER_FLOOR_HEIGHT;
    }



    //private void checkHeight(Graphics2D graphics, LocalPoint local)
    private void checkHeight(LocalPoint local)
    {
        Player player = client.getLocalPlayer();
        //LocalPoint localLocation = local.getLocalLocation();
        LocalPoint localLocation = local;
        //LocalPoint location = vein.getLocalLocation();
        //if (localLocation.distanceTo(location) <= MAX_DISTANCE) {
        //Only draw veins on the same level
        //if (plugin.isUpstairs(localLocation) == plugin.isUpstairs(vein.getLocalLocation())) {
            //renderVein(graphics, vein);
        //}
        if(isUpstairs(player.getLocalLocation()) == isUpstairs(localLocation))
        {
            //IS UPSTAIRS
            //renderTile(graphics, local, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            floorHeight = 1;
        }
        else {
            //IS DOWNSTAIRS
            floorHeight = 0;
        }
    }



     void fixStrutSpawn(LocalPoint strut)
     {
         final LocalPoint strut1 = LocalPoint.fromWorld(client, 3742, 5669);
         final LocalPoint strut2 = LocalPoint.fromWorld(client, 3742, 5663);
         if(strut.equals(strut1))
         {
             strut1Repair = 0;
         }
         if(strut.equals(strut2))
         {
             strut2Repair = 0;
         }
     }



    void fixStrutDespawn(LocalPoint strut)
    {
        final LocalPoint strut1 = LocalPoint.fromWorld(client, 3742, 5669);
        final LocalPoint strut2 = LocalPoint.fromWorld(client, 3742, 5663);
        if(strut.equals(strut1))
        {
            strut1Repair = 1;
        }
        if(strut.equals(strut2))
        {
            strut2Repair = 1;
        }
    }



    @Override
    public Dimension render(Graphics2D graphics)
    {
        final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
        final LocalPoint myPos = LocalPoint.fromWorld(client, playerPos);

        final LocalPoint hammerCrate = LocalPoint.fromWorld(client, 3752, 5674);
        final LocalPoint hammerCrateLeft = LocalPoint.fromWorld(client, 3751, 5674);
        final LocalPoint hammerCrateBottom = LocalPoint.fromWorld(client, 3752, 5673);
        final LocalPoint hammerCrateRight = LocalPoint.fromWorld(client, 3753, 5674);

        final LocalPoint strut1 = LocalPoint.fromWorld(client, 3742, 5669);
        final LocalPoint strut1Left = LocalPoint.fromWorld(client, 3741, 5669);
        final LocalPoint strut2 = LocalPoint.fromWorld(client, 3742, 5663);
        final LocalPoint strut2Left = LocalPoint.fromWorld(client, 3741, 5663);

        final LocalPoint hopper = LocalPoint.fromWorld(client, 3748,5672);
        final LocalPoint hopperRight = LocalPoint.fromWorld(client, 3749, 5672);
        final LocalPoint hopperTop = LocalPoint.fromWorld(client, 3748, 5673);

        final LocalPoint sack = LocalPoint.fromWorld(client, 3748, 5659);
        final LocalPoint sackRight = LocalPoint.fromWorld(client, 3749, 5659);
        final LocalPoint sackBottom = LocalPoint.fromWorld(client, 3748, 5658);
        final LocalPoint sackTop = LocalPoint.fromWorld(client, 3747, 5659);

        final LocalPoint bankDeposit = LocalPoint.fromWorld(client, 3759, 5664);
        final LocalPoint bankDepositLeft = LocalPoint.fromWorld(client, 3758, 5664);
        final LocalPoint bankDepositTop = LocalPoint.fromWorld(client, 3759, 5665);
        final LocalPoint bankDepositBottom = LocalPoint.fromWorld(client, 3759, 5663);

        final LocalPoint lowerLadder = LocalPoint.fromWorld(client, 3755,5673);
        final LocalPoint upperLadder = LocalPoint.fromWorld(client, 3755,5674);

        final LocalPoint nodeL1 = LocalPoint.fromWorld(client, 3755,5677);//26661

        final LocalPoint nodeL2 = LocalPoint.fromWorld(client, 3754,5678);//26661
        final LocalPoint nodeL3 = LocalPoint.fromWorld(client, 3753,5680);//26661

        final LocalPoint nodeL4 = LocalPoint.fromWorld(client, 3751,5680);//26662
        final LocalPoint nodeL5 = LocalPoint.fromWorld(client, 3751,5681);//26664

        final LocalPoint nodeL6 = LocalPoint.fromWorld(client, 3754,5682);//26664
        final LocalPoint nodeL7 = LocalPoint.fromWorld(client, 3754,5683);//26662

        final LocalPoint nodeL8 = LocalPoint.fromWorld(client, 3753,5684);//26664
        final LocalPoint nodeL9 = LocalPoint.fromWorld(client, 3752,5684);//26662

        final LocalPoint nodeL10 = LocalPoint.fromWorld(client, 3750,5682);//26662
        final LocalPoint nodeL11 = LocalPoint.fromWorld(client, 3749,5682);//26663
        final LocalPoint nodeL12 = LocalPoint.fromWorld(client, 3748,5682);//26664
        final LocalPoint nodeL13 = LocalPoint.fromWorld(client, 3747,5683);//26661

        final LocalPoint nodeR1 = LocalPoint.fromWorld(client, 3758,5675);//26661
        final LocalPoint nodeR2 = LocalPoint.fromWorld(client, 3759,5674);//26662
        final LocalPoint nodeR3 = LocalPoint.fromWorld(client, 3760,5674);//26663
        final LocalPoint nodeR4 = LocalPoint.fromWorld(client, 3761,5674);//26664
        final LocalPoint nodeR5 = LocalPoint.fromWorld(client, 3762,5673);//26662
        final LocalPoint nodeR6 = LocalPoint.fromWorld(client, 3762,5672);//26663
        final LocalPoint nodeR7 = LocalPoint.fromWorld(client, 3762,5671);//26663
        final LocalPoint nodeR8 = LocalPoint.fromWorld(client, 3762,5670);//26664



        if(test2D != 0 && test2D < 29)
        {
            int tempSpacingX = splitCounterX * 10;//8,12
            int tempSpacingY = splitCounterY * 36;
            my2Dx = 895 + (splitCounterX * 32) + tempSpacingX;
            my2Dy = 385 + tempSpacingY;
            my2Dwidth = 32;
            my2Dheight = 32;
            render2D(graphics, config.highlightHoveredColor());
            graphics.fillRect(my2Dx, my2Dy, my2Dwidth, my2Dheight);
        }



        checkHeight(upperLadder);
        sackNumber = plugin.calculateDepositsLeft();



        //if(sackNumber < 2 && floorHeight == 0)
        if (myPos.equals((strut1Left)) || myPos.equals((strut2Left)))
        {
            if (strut1Repair == 0 || strut2Repair == 0)
            {
                if(sackNumber < 2 && sackNumber > 4)
                {
                    drawStrut1 = 0;
                    drawStrut2 = 0;
                    hasPaydirt = 0;
                    isSackHighlighted = 0;
                    isBankHighlighted = 0;
                }
            }
            else
            {
                drawStrut1 = 0;
                drawStrut2 = 0;
                hasPaydirt = 0;
                isSackHighlighted = 1;
                isBankHighlighted = 0;
            }
        }

        if(myPos.equals((hammerCrateLeft)) || myPos.equals((hammerCrateBottom)) || myPos.equals((hammerCrateRight)))
        {
            isHammerHighlighted = 0;
            if (strut1Repair == 1 && strut2Repair == 1) {
                drawStrut1 = 1;
            }
        }
        if(myPos.equals((hopperRight))) //|| myPos.equals((hopperTop)))
        {
            hasPaydirt = 0;
            if(sackNumber < 2)
            {
                if(strut1Repair == 0 || strut2Repair == 0)
                {
                    isSackHighlighted = 1;
                }
            }
            else
            {
                isSackHighlighted = 0;
                if(strut1Repair == 1 && strut2Repair == 1)
                {
                    isHammerHighlighted = 1;
                }
            }
        }
        if(myPos.equals((sackRight)) || myPos.equals((sackBottom)) || myPos.equals((sackTop)))
        {
            hasPaydirt = 0;
            drawStrut1 = 0;
            drawStrut2 = 0;
            isSackHighlighted = 0;
            isBankHighlighted = 1;
        }
        if(myPos.equals((bankDepositLeft)) || myPos.equals((bankDepositTop)) || myPos.equals((bankDepositBottom)))
        {
            hasPaydirt = 0;
            drawStrut1 = 0;
            drawStrut2 = 0;
            isBankHighlighted = 0;
            if(sackNumber < 4)
            {
                isSackHighlighted = 1;
            }
            if(sackNumber >= 3)
            {
                hasPaydirt = 0;
                isSackHighlighted = 0;
            }
        }



        if(isBankHighlighted == 1) {
            renderTile(graphics, bankDeposit, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(drawStrut1 == 1)
        {
            renderTile(graphics, strut1, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(drawStrut2 == 1)
        {
            renderTile(graphics, strut2, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(isHammerHighlighted == 1) {
            renderTile(graphics, hammerCrate, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(isSackHighlighted == 1) {
            renderTile(graphics, sack, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(sackNumber > 0 && floorHeight == 0 && hasPaydirt == 1)
        {
            renderTile(graphics, hopper, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }



        else if(sackNumber > 1 && floorHeight == 0 && isSackHighlighted == 0 && isBankHighlighted == 0) {
            renderTile(graphics, lowerLadder, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        else if(sackNumber > 0 && floorHeight == 1)
        {
            if(hasPaydirt == 1) {
                renderTile(graphics, upperLadder, config.highlightDestinationColor(), 2, config.highlightHoveredColor());//FULL, GO DOWN
            }
            else
            {
                for (WallObject vein : plugin.getVeins())
                {
                    LocalPoint location = vein.getLocalLocation();
                    if (myPos.distanceTo(location) <= MAX_DISTANCE)
                    {
                        if (miningNodeID == 0)
                        {
                            if (location.equals(nodeL1)) {miningNode = nodeL1;miningNodeID = 1;}
                            else if (location.equals(nodeL2)) {miningNode = nodeL2;miningNodeID = 2;}
                            else if (location.equals(nodeL3)) {miningNode = nodeL3;miningNodeID = 3;}
                            else if (location.equals(nodeL4)) {miningNode = nodeL4;miningNodeID = 4;}
                            else if (location.equals(nodeL5)) {miningNode = nodeL5;miningNodeID = 5;}
                            else if (location.equals(nodeL6)) {miningNode = nodeL6;miningNodeID = 6;}
                            else if (location.equals(nodeL7)) {miningNode = nodeL7;miningNodeID = 7;}
                            else if (location.equals(nodeL8)) {miningNode = nodeL8;miningNodeID = 8;}
                            else if (location.equals(nodeL9)) {miningNode = nodeL9;miningNodeID = 9;}
                            else if (location.equals(nodeL10)) {miningNode = nodeL10;miningNodeID = 10;}
                            else if (location.equals(nodeL11)) {miningNode = nodeL11;miningNodeID = 11;}
                            else if (location.equals(nodeL12)) {miningNode = nodeL12;miningNodeID = 12;}
                            else if (location.equals(nodeL13)) {miningNode = nodeL13;miningNodeID = 13;}
                            testChange = miningNodeID;
                            lastNode = testChange;
                        }
                    }
                }
                renderTile(graphics, miningNode, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
        }
        ItemContainer container = client.getItemContainer(InventoryID.INVENTORY);
        for (Item item : container.getItems())
        {
            test2D = 0;
            if(testValue < 27 && container.getItem(testValue).getId() == ItemID.PAYDIRT)
            {
                testValue += 1;

                if(testChange == 13)
                {
                    testChange = 1;
                    lastNode = 13;
                }

                if(setTimer == 0)
                {
                    setTimer = 1;

                    Timer timer = new Timer();
                    TimerTask task = new TimerTask()
                    {
                        public void run()
                        {
                            lastNode = testChange;
                            testChange += 1;//MOVE TO THE NEXT TILE
                            setTimer = 0;
                            timer.cancel();
                        };
                    };
                    timer.schedule(task, 45000, 45000);
                }
            }



            else if(container.getItem(0).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(0).getId() == ItemID.UNCUT_EMERALD || container.getItem(0).getId() == ItemID.UNCUT_RUBY || container.getItem(0).getId() == ItemID.UNCUT_DIAMOND){test2D = 1;splitCounterY+= 0;}
            else if(container.getItem(1).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(1).getId() == ItemID.UNCUT_EMERALD || container.getItem(1).getId() == ItemID.UNCUT_RUBY || container.getItem(1).getId() == ItemID.UNCUT_DIAMOND){test2D = 2;splitCounterX+=1;}
            else if(container.getItem(2).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(2).getId() == ItemID.UNCUT_EMERALD || container.getItem(2).getId() == ItemID.UNCUT_RUBY || container.getItem(2).getId() == ItemID.UNCUT_DIAMOND){test2D = 3;splitCounterX+=2;}
            else if(container.getItem(3).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(3).getId() == ItemID.UNCUT_EMERALD || container.getItem(3).getId() == ItemID.UNCUT_RUBY || container.getItem(3).getId() == ItemID.UNCUT_DIAMOND){test2D = 4;splitCounterX+=3;}

            else if(container.getItem(4).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(4).getId() == ItemID.UNCUT_EMERALD || container.getItem(4).getId() == ItemID.UNCUT_RUBY || container.getItem(4).getId() == ItemID.UNCUT_DIAMOND){test2D = 5;splitCounterY+= 1;}
            else if(container.getItem(5).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(5).getId() == ItemID.UNCUT_EMERALD || container.getItem(5).getId() == ItemID.UNCUT_RUBY || container.getItem(5).getId() == ItemID.UNCUT_DIAMOND){test2D = 6;splitCounterY+= 1;splitCounterX+=1;}
            else if(container.getItem(6).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(6).getId() == ItemID.UNCUT_EMERALD || container.getItem(6).getId() == ItemID.UNCUT_RUBY || container.getItem(6).getId() == ItemID.UNCUT_DIAMOND){test2D = 7;splitCounterY+= 1;splitCounterX+=2;}
            else if(container.getItem(7).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(7).getId() == ItemID.UNCUT_EMERALD || container.getItem(7).getId() == ItemID.UNCUT_RUBY || container.getItem(7).getId() == ItemID.UNCUT_DIAMOND){test2D = 8;splitCounterY+= 1;splitCounterX+=3;}

            else if(container.getItem(8).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(8).getId() == ItemID.UNCUT_EMERALD || container.getItem(8).getId() == ItemID.UNCUT_RUBY || container.getItem(8).getId() == ItemID.UNCUT_DIAMOND){test2D = 9;splitCounterY+= 2;}
            else if(container.getItem(9).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(9).getId() == ItemID.UNCUT_EMERALD || container.getItem(9).getId() == ItemID.UNCUT_RUBY || container.getItem(9).getId() == ItemID.UNCUT_DIAMOND){test2D = 10;splitCounterY+= 2;splitCounterX+=1;}
            else if(container.getItem(10).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(10).getId() == ItemID.UNCUT_EMERALD || container.getItem(10).getId() == ItemID.UNCUT_RUBY || container.getItem(10).getId() == ItemID.UNCUT_DIAMOND){test2D = 11;splitCounterY+= 2;splitCounterX+=2;}
            else if(container.getItem(11).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(11).getId() == ItemID.UNCUT_EMERALD || container.getItem(11).getId() == ItemID.UNCUT_RUBY || container.getItem(11).getId() == ItemID.UNCUT_DIAMOND){test2D = 12;splitCounterY+= 2;splitCounterX+=3;}

            else if(container.getItem(12).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(12).getId() == ItemID.UNCUT_EMERALD || container.getItem(12).getId() == ItemID.UNCUT_RUBY || container.getItem(12).getId() == ItemID.UNCUT_DIAMOND){test2D = 13;splitCounterY+= 3;}
            else if(container.getItem(13).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(13).getId() == ItemID.UNCUT_EMERALD || container.getItem(13).getId() == ItemID.UNCUT_RUBY || container.getItem(13).getId() == ItemID.UNCUT_DIAMOND){test2D = 14;splitCounterY+= 3;splitCounterX+=1;}
            else if(container.getItem(14).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(14).getId() == ItemID.UNCUT_EMERALD || container.getItem(14).getId() == ItemID.UNCUT_RUBY || container.getItem(14).getId() == ItemID.UNCUT_DIAMOND){test2D = 15;splitCounterY+= 3;splitCounterX+=2;}
            else if(container.getItem(15).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(15).getId() == ItemID.UNCUT_EMERALD || container.getItem(15).getId() == ItemID.UNCUT_RUBY || container.getItem(15).getId() == ItemID.UNCUT_DIAMOND){test2D = 16;splitCounterY+= 3;splitCounterX+=3;}

            else if(container.getItem(16).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(16).getId() == ItemID.UNCUT_EMERALD || container.getItem(16).getId() == ItemID.UNCUT_RUBY || container.getItem(16).getId() == ItemID.UNCUT_DIAMOND){test2D = 17;splitCounterY+= 4;}
            else if(container.getItem(17).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(17).getId() == ItemID.UNCUT_EMERALD || container.getItem(17).getId() == ItemID.UNCUT_RUBY || container.getItem(17).getId() == ItemID.UNCUT_DIAMOND){test2D = 18;splitCounterY+= 4;splitCounterX+=1;}
            else if(container.getItem(18).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(18).getId() == ItemID.UNCUT_EMERALD || container.getItem(18).getId() == ItemID.UNCUT_RUBY || container.getItem(18).getId() == ItemID.UNCUT_DIAMOND){test2D = 19;splitCounterY+= 4;splitCounterX+=2;}
            else if(container.getItem(19).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(19).getId() == ItemID.UNCUT_EMERALD || container.getItem(19).getId() == ItemID.UNCUT_RUBY || container.getItem(19).getId() == ItemID.UNCUT_DIAMOND){test2D = 20;splitCounterY+= 4;splitCounterX+=3;}

            else if(container.getItem(20).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(20).getId() == ItemID.UNCUT_EMERALD || container.getItem(20).getId() == ItemID.UNCUT_RUBY || container.getItem(20).getId() == ItemID.UNCUT_DIAMOND){test2D = 21;splitCounterY+= 5;}
            else if(container.getItem(21).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(21).getId() == ItemID.UNCUT_EMERALD || container.getItem(21).getId() == ItemID.UNCUT_RUBY || container.getItem(21).getId() == ItemID.UNCUT_DIAMOND){test2D = 22;splitCounterY+= 5;splitCounterX+=1;}
            else if(container.getItem(22).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(22).getId() == ItemID.UNCUT_EMERALD || container.getItem(22).getId() == ItemID.UNCUT_RUBY || container.getItem(22).getId() == ItemID.UNCUT_DIAMOND){test2D = 23;splitCounterY+= 5;splitCounterX+=2;}
            else if(container.getItem(23).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(23).getId() == ItemID.UNCUT_EMERALD || container.getItem(23).getId() == ItemID.UNCUT_RUBY || container.getItem(23).getId() == ItemID.UNCUT_DIAMOND){test2D = 24;splitCounterY+= 5;splitCounterX+=3;}

            else if(container.getItem(24).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(24).getId() == ItemID.UNCUT_EMERALD || container.getItem(24).getId() == ItemID.UNCUT_RUBY || container.getItem(24).getId() == ItemID.UNCUT_DIAMOND){test2D = 25;splitCounterY+= 6;}
            else if(container.getItem(25).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(25).getId() == ItemID.UNCUT_EMERALD || container.getItem(25).getId() == ItemID.UNCUT_RUBY || container.getItem(25).getId() == ItemID.UNCUT_DIAMOND){test2D = 26;splitCounterY+= 6;splitCounterX+=1;}
            else if(container.getItem(26).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(26).getId() == ItemID.UNCUT_EMERALD || container.getItem(26).getId() == ItemID.UNCUT_RUBY || container.getItem(26).getId() == ItemID.UNCUT_DIAMOND){test2D = 27;splitCounterY+= 6;splitCounterX+=2;}
            else if(container.getItem(27).getId() == ItemID.UNCUT_SAPPHIRE || container.getItem(27).getId() == ItemID.UNCUT_EMERALD || container.getItem(27).getId() == ItemID.UNCUT_RUBY || container.getItem(27).getId() == ItemID.UNCUT_DIAMOND){test2D = 28;splitCounterY+= 6;splitCounterX+=3;}



            if(container.getItem(27).getId() == ItemID.PAYDIRT)
            {
                isBankHighlighted = 0;
                hasPaydirt = 1;
                testValue = 0;
            }



            if (item.getId() == ItemID.GRANITE_500G || item.getId() == ItemID.GRANITE_2KG || item.getId() == ItemID.GRANITE_5KG)//HIGHLIGHT_ALL
            {
                drawGranite = 0;
                //DRAW GRID HERE
                int tempSpacingX = splitCounterX * 10;//8,12
                int tempSpacingY = splitCounterY * 36;
                //INVENTORY PARENT START POS 570,241
                my2Dx = 570 + (splitCounterX * 32) + tempSpacingX;
                my2Dy = 214 + tempSpacingY;
                //SPRITE SIZE 32
                my2Dwidth = 32;
                my2Dheight = 32;
                render2D(graphics, config.highlightHoveredColor());
                graphics.fillRect(my2Dx, my2Dy, my2Dwidth, my2Dheight);
                //Rectangle bounds = wItem.getCanvasBounds();
                //render2Daaa(graphics, config.highlightHoveredColor(), bounds);
                //bbb = 1;
                //graphics.setColor(config.highlightHoveredColor());
                //graphics.drawLine((int) 5, 5, 500, 10);
                //graphics.drawLine((int) bounds.getX(), heightOffSet, (int) bounds.getX() + (int) bounds.getWidth(), heightOffSet);

                invSlot++;
                splitCounterX++;
                if(splitCounterX == 4) {
                    splitCounterX = 0;
                    splitCounterY++;
                    //split4++;
                    if(splitCounterY == 7) {
                        splitCounterY = 0;
                    }
                }
            }
        }

        //if(drawGranite == 1) {
            //renderTile(graphics, lGranite, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        //}
        //renderTile(graphics, lGranite, config.highlightDestinationColor(), 2, config.highlightHoveredColor());

        return null;
    }


    private void render2D(Graphics2D graphics, final Color fillColor)
    {
        graphics.setColor(fillColor);
        graphics.fillRect(my2Dx, my2Dy, my2Dwidth, my2Dheight);
        //graphics.fillRect(350, 50, 200, 200);
    }

    private void render2Daaa(Graphics2D graphics, final Color fillColor, Rectangle bounds)
    {
        graphics.setColor(fillColor);
        graphics.draw(bounds);

        graphics.fillRect(700, 550, 100, 100);
        //graphics.fillRect(bounds.x, bounds.y, 30, 30);

        //graphics.fillRect(bounds.x, bounds.y, 30, 30);
        //graphics.fillRect(bounds.x, bounds.y, my2Dwidth, my2Dheight);
        //graphics.fillRect(5, 5, my2Dwidth, my2Dheight);
    }

    private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final double borderWidth, final Color fillColor)
    {
        if (dest == null)
        {
            return;
        }

        final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        if (poly == null)
        {
            return;
        }

        //OverlayUtil.renderPolygon(graphics, poly, color);
        OverlayUtil.renderPolygon(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth));
    }
}
