//BY BUTTBURGER FOR BOUNTY HUNTER 5/26/2023
//PLUGINS BORROWED AND REARRANGED: npchighlight, playerindicators, screenshot
package net.runelite.client.plugins.myPlayerDeathMarker;



import java.awt.*;
import javax.inject.*;

import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.Point;
import net.runelite.api.clan.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
//import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillConfig;
//import net.runelite.client.plugins.playerindicators.PlayerIndicatorsService;
import net.runelite.client.party.PartyService;
import net.runelite.client.plugins.npchighlight.NpcIndicatorsPlugin;
import net.runelite.client.plugins.playerindicators.PlayerIndicatorsConfig;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;



import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;


import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Value;
import net.runelite.api.*;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.events.FocusChanged;

import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.AgilityShortcut;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
//import net.runelite.client.plugins.agility.Obstacle;
import net.runelite.client.plugins.entityhider.EntityHiderConfig;
import net.runelite.client.plugins.fps.FpsDrawListener;
import net.runelite.client.util.Text;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.time.Instant;
import java.util.*;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Predicate;


import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.TileItem;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

import static net.runelite.api.FriendsChatRank.UNRANKED;



public class myPlayerDeathMarkerOverlay extends Overlay
{
    private static final NumberFormat TIME_LEFT_FORMATTER = DecimalFormat.getInstance(Locale.US);

    static
    {
        ((DecimalFormat)TIME_LEFT_FORMATTER).applyPattern("#0.0");
    }

    private final Client client;
    private final myPlayerDeathMarkerConfig config;
    private final myPlayerDeathMarkerPlugin plugin;
    private final PartyService partyService;

    @Inject
    private myPlayerDeathMarkerOverlay(Client client,  myPlayerDeathMarkerConfig config, myPlayerDeathMarkerPlugin plugin, PartyService partyService)//, PlayerIndicatorsService playerIndicatorsService)
    {
        this.client = client;
        this.config = config;
        this.plugin = plugin;
        //this.playerIndicatorsService = playerIndicatorsService;
        this.partyService = partyService;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(OverlayPriority.MED);
    }

    WorldPoint wp;
    Player player;
    int scanGrace;
    LocalPoint localGrace;
    int myX;
    int myY;
    int dCounter;
    final double timeLeft = 99.0f;
    double lastTime;
    double currentTime;
    Player playerList;
    LocalPoint playerListPoint;
    LocalPoint tempLP;


    int[] playerArrayX = new int[90000];
    int[] playerArrayY = new int[90000];
    int[] playerTimerList = new int[1000];
    double[] currentTimeList = new double[90000];
    int playerLoop;
    void deathCounter(Player player, LocalPoint lp)
    {
        playerList = player;
        playerListPoint = lp;
        //LocalPoint lp = player.getLocalLocation();



        playerArrayX[dCounter] = playerListPoint.getX();
        playerArrayY[dCounter] = playerListPoint.getY();
        //final LocalPoint tempLP = new LocalPoint(playerArrayX[i], playerArrayY[i]);
        dCounter++;
    }

    void resetLoop()
    {
        playerLoop = 0;
    }

    void reloadScan(ItemSpawned itemSpawned)
    {
        final TileItem item = itemSpawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            wp = itemSpawned.getTile().getWorldLocation();
            player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.addIgnoreTile(wp);
                }
                else
                {
                    //mogSession.addMarkTile(wp, item.getQuantity());
                    //mSession.addMarkTest(wp);//DO_NOT_USE
                    //reloadConfig();
                    scanGrace = 1;
                    localGrace = LocalPoint.fromWorld(client, wp);
                }
            }
        }
    }


    void graceDespawned()
    {
        scanGrace = 0;
    }



    @Override
    public Dimension render(Graphics2D graphics)
    {
        //Stroke stroke = new BasicStroke((float) config.borderWidth());

        //final LocalPoint scanPos = LocalPoint.fromWorld(client, wp);//PROBLEM
        final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
        final LocalPoint myPos = LocalPoint.fromWorld(client, playerPos);

        myX = myPos.getX();
        myY = myPos.getY();

        //final LocalPoint grandExchangePoint = LocalPoint.fromWorld(client, 3165,3485);
        //if(playerPos.getPlane() == 0) {
            //renderTile(graphics, grandExchangePoint, config.highlightDestinationColor(), stroke);
        //}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        //forEachPlayer((player, decorations) ->
        //{
            //renderTile(graphics, grandExchangePoint, config.highlightDestinationColor(), stroke);
        //});



        forEachPlayer(graphics);
        //forEachPlayer(graphics, grandExchangePoint, config.highlightDestinationColor(), stroke);



        /*
        if (!config.drawTiles())
        {
            return null;
        }

        playerIndicatorsService.forEachPlayer((player, decorations) ->
        {
            final Polygon poly = player.getCanvasTilePoly();

            if (poly != null)
            {
                OverlayUtil.renderPolygon(graphics, poly, decorations.getColor());
            }
        });
         */


        return null;
    }

    //private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final double borderWidth, final Color fillColor)
    //private void renderTile(final Graphics2D graphics, final LocalPoint point, final Color color, @Nullable String label, Stroke borderStroke)
    private void renderTile(final Graphics2D graphics, final LocalPoint point, final Color color, Stroke borderStroke)
    {
        //if (dest == null)
        //{
            //return;
        //}

        //final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        //if (poly == null)
        //{
            //return;
        //}

        //OverlayUtil.renderPolygon(graphics, poly, color);
        //OverlayUtil.renderPolygon(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth));



        //LocalPoint lp = LocalPoint.fromWorld(client, point);
        //if (lp == null)
        //{
            //return;
        //}
        Polygon poly = Perspective.getCanvasTilePoly(client, point);
        if (poly != null)
        {
            OverlayUtil.renderPolygon(graphics, poly, color, new Color(0, 0, 0, config.fillOpacity()), borderStroke);
        }
        //OverlayUtil.renderPolygon(graphics, poly, color, new Color(0, 0, 0, config.fillOpacity()), borderStroke);


    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //void forEachPlayer(final BiConsumer<Player, Decorations> consumer)
    //void forEachPlayer(final Graphics2D graphics, final LocalPoint lp, final Color color, Stroke stroke)
    void forEachPlayer(final Graphics2D graphics)
    {
        Stroke stroke = new BasicStroke((float) config.borderWidth());
        for (Player player : client.getPlayers())
        {
            if (player == null || player.getName() == null)
            {
                continue;
            }
            int playerX = 0;
            int playerY = 0;
            final LocalPoint playerTemp = player.getLocalLocation();
            //final Polygon poly = player.getCanvasTilePoly();
            //OverlayUtil.renderPolygon(graphics, poly, Color.RED.brighter());
            //OverlayUtil.renderPolygon(graphics, poly, color);

            //Color playerColor = null;
            //getDecorations(player, playerColor);


            final Predicate<PlayerIndicatorsConfig.HighlightSetting> isEnabled = (hs) -> hs == PlayerIndicatorsConfig.HighlightSetting.ENABLED ||
                    (hs == PlayerIndicatorsConfig.HighlightSetting.PVP && (client.getVarbitValue(Varbits.IN_WILDERNESS) == 1 || client.getVarbitValue(Varbits.PVP_SPEC_ORB) == 1));

            Color color = null;
            if (player == client.getLocalPlayer()) {
                if (isEnabled.test(config.highlightOwnPlayer())) {
                    color = config.getOwnPlayerColor();
                }
            } else if (partyService.isInParty() && isEnabled.test(config.highlightPartyMembers()) && partyService.getMemberByDisplayName(player.getName()) != null) {
                color = config.getPartyMemberColor();
            } else if (player.isFriend() && isEnabled.test(config.highlightFriends())) {
                color = config.getFriendColor();
            } else if (player.isFriendsChatMember() && isEnabled.test(config.highlightFriendsChat())) {
                color = config.getFriendsChatMemberColor();
            } else if (player.getTeam() > 0 && client.getLocalPlayer().getTeam() == player.getTeam() && isEnabled.test(config.highlightTeamMembers())) {
                color = config.getTeamMemberColor();
            } else if (player.isClanMember() && isEnabled.test(config.highlightClanMembers())) {
                color = config.getClanMemberColor();
            } else if (!player.isFriendsChatMember() && !player.isClanMember() && isEnabled.test(config.highlightOthers())) {
                color = config.getOthersColor();
            }

            FriendsChatRank rank = null;
            ClanTitle clanTitle = null;
            if (player.isFriendsChatMember() && config.showFriendsChatRanks()) {
                rank = getFriendsChatRank(player);
            }
            if (player.isClanMember() && config.showClanChatRanks()) {
                clanTitle = getClanTitle(player);
            }

            //renderTile(graphics, playerTemp, config.highlightDestinationColor(), stroke);
            //renderTile(graphics, playerTemp, playerColor, stroke);

            renderTile(graphics, playerTemp, color, stroke);

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //final Instant now = Instant.now();
            final double baseTick = (//(npc.getDiedOnTick() + npc.getRespawnTime()) -
                    client.getTickCount()) * (Constants.GAME_TICK_LENGTH / 1000.0);
            //final double sinceLast = (now.toEpochMilli() - plugin.getLastTickUpdate().toEpochMilli()) / 1000.0);
            //final double sinceLast = baseTick;

            //final double timeLeft = 99.0f;
            final double timeLeft = Math.max(0.0, baseTick - lastTime);//final double timeLeft = Math.max(0.0, baseTick - sinceLast);
            //final double timeLeft = Math.max(0.0, baseTick);//final double timeLeft = Math.max(0.0, sinceLast);
            //currentTime += timeLeft;

            //final String timeLeftStr = TIME_LEFT_FORMATTER.format(timeLeft);//final String timeLeftStr = TIME_LEFT_FORMATTER.format(currentTime);
            //final String timeLeftStr = TIME_LEFT_FORMATTER.format(dCounter);
            //final String timeLeftStr = TIME_LEFT_FORMATTER.format(currentTime);
            lastTime = baseTick;//lastTime = 99.0f;

            for (int i = 0; i < dCounter; i++) {
                //int[] testarray = new int[1000];
                //void deathCounter(Player player, LocalPoint lp)//Graphics2D graphics
                //playerList;
                //playerListPoint;

                //OVERWRITES, AVOID
                //playerArrayX[i] = playerListPoint.getX();
                //playerArrayY[i] = playerListPoint.getY();
                //final LocalPoint tempLP = new LocalPoint(playerArrayX[i], playerArrayY[i]);
                tempLP = new LocalPoint(playerArrayX[i], playerArrayY[i]);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                currentTimeList[i] += timeLeft;
                final String timeLeftStr = TIME_LEFT_FORMATTER.format(currentTimeList[i]);



                //LocalPoint lp = playerList.getLocalLocation();
                //final LocalPoint testPoint = LocalPoint.fromWorld(client, 3428, 4060);
                //renderTile(graphics, playerListPoint, config.highlightDestinationColor(), stroke);
                //renderTile(graphics, tempLP, config.highlightDestinationColor(), stroke);



                Point canvasTextLocation = Perspective.getCanvasTextLocation(client, graphics, tempLP, timeLeftStr, 0);
                if (canvasTextLocation != null && currentTimeList[i] <= 60.0f)
                {
                    renderTile(graphics, tempLP, config.highlightDestinationColor(), stroke);
                    OverlayUtil.renderTextLocation(graphics, canvasTextLocation, timeLeftStr, config.highlightDestinationColor());
                }
                /*
                if(currentTimeList[i] > 60.0f)
                {
                    currentTimeList[i] = 0.0f;
                    //playerLoop++;
                }
                 */

            }


            ////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //OverlayUtil.renderTextLocation(graphics, canvasCenterPoint, timeLeftStr, config.getOthersColor());

            /*
            PlayerIndicatorsService.Decorations decorations = getDecorations(player);
            if (decorations != null && decorations.getColor() != null)
            {
                consumer.accept(player, decorations);
            }
             */
        }
    }


    /*
    //net.runelite.client.plugins.myPlayerDeathMarker.PlayerIndicatorsService.Decorations getDecorations(Player player)
    //PlayerIndicatorsService.Decorations getDecorations(Player player)
    void getDecorations(Player player, Color pColor)
    {
        //if (player.getName() == null) {
            //return null;
        //}

        final Predicate<PlayerIndicatorsConfig.HighlightSetting> isEnabled = (hs) -> hs == PlayerIndicatorsConfig.HighlightSetting.ENABLED ||
                (hs == PlayerIndicatorsConfig.HighlightSetting.PVP && (client.getVarbitValue(Varbits.IN_WILDERNESS) == 1 || client.getVarbitValue(Varbits.PVP_SPEC_ORB) == 1));

        Color color = null;
        if (player == client.getLocalPlayer()) {
            if (isEnabled.test(config.highlightOwnPlayer())) {
                color = config.getOwnPlayerColor();
            }
        } else if (partyService.isInParty() && isEnabled.test(config.highlightPartyMembers()) && partyService.getMemberByDisplayName(player.getName()) != null) {
            color = config.getPartyMemberColor();
        } else if (player.isFriend() && isEnabled.test(config.highlightFriends())) {
            color = config.getFriendColor();
        } else if (player.isFriendsChatMember() && isEnabled.test(config.highlightFriendsChat())) {
            color = config.getFriendsChatMemberColor();
        } else if (player.getTeam() > 0 && client.getLocalPlayer().getTeam() == player.getTeam() && isEnabled.test(config.highlightTeamMembers())) {
            color = config.getTeamMemberColor();
        } else if (player.isClanMember() && isEnabled.test(config.highlightClanMembers())) {
            color = config.getClanMemberColor();
        } else if (!player.isFriendsChatMember() && !player.isClanMember() && isEnabled.test(config.highlightOthers())) {
            color = config.getOthersColor();
        }

        FriendsChatRank rank = null;
        ClanTitle clanTitle = null;
        if (player.isFriendsChatMember() && config.showFriendsChatRanks()) {
            rank = getFriendsChatRank(player);
        }
        if (player.isClanMember() && config.showClanChatRanks()) {
            clanTitle = getClanTitle(player);
        }

        //if (color == null && rank == null && clanTitle == null) {
            //return null;
        //}
        //return new PlayerIndicatorsService.Decorations(rank, clanTitle, color);

        //pColor = color;
        pColor = config.highlightDestinationColor();
    }
     */


    @Value
    static class Decorations
    {
        FriendsChatRank friendsChatRank;
        ClanTitle clanTitle;
        Color color;
    }

    private ClanTitle getClanTitle(Player player)
    {
        ClanChannel clanChannel = client.getClanChannel();
        ClanSettings clanSettings = client.getClanSettings();
        if (clanChannel == null || clanSettings == null)
        {
            return null;
        }

        ClanChannelMember member = clanChannel.findMember(player.getName());
        if (member == null)
        {
            return null;
        }

        ClanRank rank = member.getRank();
        return clanSettings.titleForRank(rank);
    }

    private FriendsChatRank getFriendsChatRank(Player player)
    {
        final FriendsChatManager friendsChatManager = client.getFriendsChatManager();
        if (friendsChatManager == null)
        {
            return UNRANKED;
        }

        FriendsChatMember friendsChatMember = friendsChatManager.findByName(Text.removeTags(player.getName()));
        return friendsChatMember != null ? friendsChatMember.getRank() : UNRANKED;
    }


}



