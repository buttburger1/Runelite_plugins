//BY BUTTBURGER 2023 GRANITE NODE GROUND AND INVENTORY MARKER
//ORIGINALLY MEANT TO DO MOTHERLODE
//PLUGINS BORROWED AND REARRANGED: groundmarkers, motherlode
package net.runelite.client.plugins.myMotherlodeMarker;

import com.google.common.collect.ImmutableSet;
import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;


import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Value;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.*;
import net.runelite.client.events.ConfigChanged;

import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.AgilityShortcut;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
//import net.runelite.client.plugins.agility.Obstacle;
import net.runelite.client.plugins.entityhider.EntityHiderConfig;
import net.runelite.client.plugins.fps.FpsDrawListener;
import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillConfig;
import net.runelite.client.plugins.myGroundMarkerFill.myGroundMarkerFillOverlay;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.*;


import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.TileItem;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;

import static net.runelite.api.ObjectID.*;
import static net.runelite.api.ObjectID.ORE_VEIN_26664;


@PluginDescriptor(
        name = "Custom Tile Motherlode",
        description = "Highlight the tile you are currently moving to",
        tags = {"highlight", "overlay"},
        enabledByDefault = false
)


public class myMotherlodeMarkerPlugin extends Plugin
{
    //@Getter
    //private final List<Tile> marksOfGrace = new ArrayList<>();

    private static final Set<Integer> MINE_SPOTS = ImmutableSet.of(ORE_VEIN_26661, ORE_VEIN_26662, ORE_VEIN_26663, ORE_VEIN_26664);
    private static final Set<Integer> DEPLETED_SPOTS = ImmutableSet.of(DEPLETED_VEIN_26665, DEPLETED_VEIN_26666, DEPLETED_VEIN_26667, DEPLETED_VEIN_26668);


    @Inject
    private Client client;

    @Inject
    private OverlayManager overlayManager;

    @Inject
    private myMotherlodeMarkerOverlay overlay;

    @Provides
    net.runelite.client.plugins.myMotherlodeMarker.myMotherlodeMarkerConfig provideConfig(ConfigManager configManager)
    {
        return configManager.getConfig(myMotherlodeMarkerConfig.class);
    }

    @Override
    protected void startUp() throws Exception
    {
        overlayManager.add(overlay);
    }

    @Override
    protected void shutDown() throws Exception
    {
        overlayManager.remove(overlay);
    }


    @Subscribe
    public void onItemSpawned(ItemSpawned itemSpawned)
    {
        final TileItem item = itemSpawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            WorldPoint wp = itemSpawned.getTile().getWorldLocation();
            Player player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.addIgnoreTile(wp);
                }
                else
                {
                    //mogSession.addMarkTile(wp, item.getQuantity());
                    //mSession.addMarkTest(wp);
                    overlay.reloadScan(itemSpawned);
                }
            }
            // mSession.addMarkTest(wp);
        }
    }


    @Subscribe
    public void onItemDespawned(ItemDespawned itemDespawned)
    {
        final TileItem item = itemDespawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            WorldPoint wp = itemDespawned.getTile().getWorldLocation();
            Player player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.removeIgnoreTile(wp);
                }
                //mogSession.removeMarkTile(wp);
                overlay.graceDespawned();
            }
        }
    }

    @Subscribe
    public void onWallObjectSpawned(WallObjectSpawned event)
    {
        WallObject wallObject = event.getWallObject();
        if(DEPLETED_SPOTS.contains(wallObject.getId())) {
            WorldPoint wp2 = wallObject.getWorldLocation();
            overlay.rescanWallNode(wp2, 0);
        }
        else if(MINE_SPOTS.contains(wallObject.getId()))
        {
            //veins.add(wallObject);
            //WorldPoint wp = itemDespawned.getTile().getWorldLocation();
            WorldPoint wp1 = wallObject.getWorldLocation();
            overlay.rescanWallNode(wp1, 1);
        }
    }

    @Subscribe
    public void onWallObjectDespawned(WallObjectDespawned event)
    {
        WallObject wallObject = event.getWallObject();
        //veins.remove(wallObject);
        /*
        WorldPoint wp = wallObject.getWorldLocation();
        overlay.despawnedWallNode(wp);
        if(DEPLETED_SPOTS.contains(wallObject.getId()))
        {
            //
        }
         */
    }

    @Subscribe
    public void onGameObjectSpawned(GameObjectSpawned gObjSpawn)
    {
        GameObject gameObj = gObjSpawn.getGameObject();
        WorldPoint wp1 = gameObj.getWorldLocation();
        LocalPoint lp1 = LocalPoint.fromWorld(client, wp1);
        //ROCKS_11387 GRANITE
        //ROCKS_11391 DEPLETED
        //if(ROCKS_11387 == gameObj.getId()) {//GRANITE ROCK
            //overlay.scanGraniteSpawn(lp1, 1);
        //}
        if(ROCKS_11391 == gameObj.getId()) {//DEPLETED ROCK
            overlay.scanGraniteSpawn(lp1, 2);
        }
    }

    @Subscribe
    public void onGameObjectDespawned(GameObjectDespawned gObjDeSpawn)
    {
        GameObject gameObj = gObjDeSpawn.getGameObject();
        WorldPoint wp2 = gameObj.getWorldLocation();
        LocalPoint lp2 = LocalPoint.fromWorld(client, wp2);
        //ROCKS_11387 GRANITE
        //ROCKS_11391 DEPLETED

        if(gameObj.getId() == ROCKS_11391) {//DEPLETED ROCK
            //WorldPoint wp3 = gObjDeSpawn.getTile().getWorldLocation();
            //Player player = client.getLocalPlayer();

            //overlay.scanGraniteSpawn(lp2, 0);//SET TO 0
        }

        //if(gameObj.getId() == ROCKS_11387) {//GRANITE ROCK
            //WorldPoint wp4 = gObjDeSpawn.getTile().getWorldLocation();
            //Player player = client.getLocalPlayer();

            //overlay.scanGraniteSpawn(lp2, 1);
        //}
    }

}

