//BY BUTTBURGER 2023 MARKER FILL FOR AGILITY SEERS VILLAGE COURSE
//PLUGINS BORROWED AND REARRANGED: agility, groundmarkers
package net.runelite.client.plugins.myGroundMarkerFill;


import java.awt.*;
import javax.inject.Inject;

import lombok.Getter;
import net.runelite.api.*;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.coords.WorldPoint;
import net.runelite.client.ui.overlay.Overlay;
import net.runelite.client.ui.overlay.OverlayLayer;
import net.runelite.client.ui.overlay.OverlayPosition;
import net.runelite.client.ui.overlay.OverlayPriority;
import net.runelite.client.ui.overlay.OverlayUtil;



import com.google.inject.Provides;

import javax.annotation.Nullable;
import javax.inject.Inject;


import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Value;
import net.runelite.api.*;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.events.ConfigChanged;
import net.runelite.api.events.FocusChanged;

import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.game.AgilityShortcut;
import net.runelite.client.game.WorldService;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.config.ConfigManager;
//import net.runelite.client.plugins.agility.Obstacle;
import net.runelite.client.plugins.entityhider.EntityHiderConfig;
import net.runelite.client.plugins.fps.FpsDrawListener;
import net.runelite.client.util.WorldUtil;
import net.runelite.http.api.worlds.World;
import net.runelite.http.api.worlds.WorldResult;

import com.google.inject.Provides;
import javax.inject.Inject;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import com.google.inject.Provides;
import javax.inject.Inject;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.Client;
import net.runelite.api.ItemID;
import net.runelite.api.Player;
import net.runelite.api.TileItem;
import net.runelite.api.MenuAction;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.GameTick;
import net.runelite.api.events.ItemDespawned;
import net.runelite.api.events.ItemSpawned;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.OverlayMenuClicked;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.ui.overlay.OverlayMenuEntry;



public class myGroundMarkerFillOverlay extends Overlay
{
    private final Client client;
    private final myGroundMarkerFillConfig config;

    @Inject
    private myGroundMarkerFillOverlay(Client client, myGroundMarkerFillConfig config)
    {
        this.client = client;
        this.config = config;
        setPosition(OverlayPosition.DYNAMIC);
        setLayer(OverlayLayer.ABOVE_SCENE);
        setPriority(OverlayPriority.MED);
    }


    WorldPoint wp;
    Player player;
    int scanGrace;
    LocalPoint localGrace;
    int level2path;
    int level3path;
    int movedLevel;
    int myX;
    int myY;

    void reloadScan(ItemSpawned itemSpawned)
    {
        final TileItem item = itemSpawned.getItem();
        if (item.getId() == ItemID.MARK_OF_GRACE)
        {
            wp = itemSpawned.getTile().getWorldLocation();
            player = client.getLocalPlayer();
            if (player != null)
            {
                if (wp.equals(player.getWorldLocation()))
                {
                    //mogSession.addIgnoreTile(wp);
                }
                else
                {
                    //mogSession.addMarkTile(wp, item.getQuantity());
                    //mSession.addMarkTest(wp);//DO_NOT_USE
                    //reloadConfig();
                    scanGrace = 1;
                    localGrace = LocalPoint.fromWorld(client, wp);
                }
            }
        }
    }


    void graceDespawned()
    {
        scanGrace = 0;
    }



    @Override
    public Dimension render(Graphics2D graphics)
    {
        //final LocalPoint scanPos = LocalPoint.fromWorld(client, wp);//PROBLEM
        final WorldPoint playerPos = client.getLocalPlayer().getWorldLocation();
        final LocalPoint myPos = LocalPoint.fromWorld(client, playerPos);

        myX = myPos.getX();
        myY = myPos.getY();

        final LocalPoint path1 = LocalPoint.fromWorld(client, 2729,3488);
        final LocalPoint path2 = LocalPoint.fromWorld(client, 2729,3491);
        final LocalPoint path3 = LocalPoint.fromWorld(client, 2713,3494);
        final LocalPoint path4 = LocalPoint.fromWorld(client, 2710,3480);
        final LocalPoint path5 = LocalPoint.fromWorld(client, 2710,3472);
        final LocalPoint path6 = LocalPoint.fromWorld(client, 2702,3465);
        final LocalPoint targetPos1 = LocalPoint.fromWorld(client, 2729,3489);

        final LocalPoint grace1 = LocalPoint.fromWorld(client, 2727,3493);
        final LocalPoint grace2 = LocalPoint.fromWorld(client, 2709,3493);
        final LocalPoint grace3 = LocalPoint.fromWorld(client, 2706,3493);
        final LocalPoint grace4 = LocalPoint.fromWorld(client, 2712,3481);
        final LocalPoint grace5 = LocalPoint.fromWorld(client, 2698,3465);


        //movedLevel
        if(playerPos.getPlane() == 0) {
            movedLevel = 0;
        }
        if(playerPos.getPlane() == 2) {
            movedLevel = 1;
        }
        if(playerPos.getPlane() == 3 && movedLevel == 1) {
            movedLevel = 2;
        }
        if(playerPos.getPlane() == 2 && movedLevel == 2) {
            movedLevel = 0;
        }


        /*
        //START WALL
        if(playerPos.getPlane() == 0 && playerPos.distanceTo(pathToTarget1) == 0) {
            renderTile(graphics, LocalPoint.fromWorld(client, 2729, 3489), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
         */
        //START WALL
        if(playerPos.getPlane() == 0) {
            renderTile(graphics, LocalPoint.fromWorld(client, 2729, 3489), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        /*
        if(playerPos.getPlane() == 0 && !myPos.equals(path1)) {
            renderTile(graphics, LocalPoint.fromWorld(client, 2729, 3489), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
        //TEMP FIX FOR NOW
        if(playerPos.getPlane() == 0 && myPos.equals(path1)) {
            renderTile(graphics, LocalPoint.fromWorld(client, 2729, 3489), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }
         */
        if(playerPos.getPlane() == 3 && myPos.equals(path2)) {
            level3path = 1;
        }
        else if(playerPos.getPlane() == 3 && myPos.equals(path5)) {
            level3path = 2;
        }
        //ROOF1
        if(playerPos.getPlane() == 3 && level3path == 1) {
            if(scanGrace == 1 && localGrace.equals(grace1)) {
                LocalPoint scanPos1 = LocalPoint.fromWorld(client, wp);
                //if(myPos.getX() > 2727) {//PROBLEM
                //if(scanPos1.distanceTo(myPos) >= 5 && myX > 2727) {
                //if(scanPos1.distanceTo(myPos) >= 5) {
                    renderTile(graphics, scanPos1, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
            //movedLevel
            //else {//if(!myPos.equals(path2)) {
            else if(movedLevel == 0) {
                renderTile(graphics, LocalPoint.fromWorld(client, 2720, 3494), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }//TARGET2
        }
        if(playerPos.getPlane() == 2 && myPos.equals(path3)) {
            level2path = 1;
        }
        else if(playerPos.getPlane() == 2 && myPos.equals(path4)) {
            level2path = 2;
        }
        else if(playerPos.getPlane() == 2 && myPos.equals(path6)) {
            level2path = 3;
        }
        //ROOF2
        if(playerPos.getPlane() == 2 && level2path == 1) {
            if(scanGrace == 1 && localGrace.equals(grace2)) {
            //if (scanGrace == 1) {
                LocalPoint scanPos2 = LocalPoint.fromWorld(client, wp);
                //if(scanPos2.distanceTo(myPos) >= 5 && myY > 3489) {
                //if(scanPos2.distanceTo(myPos) >= 5) {
                    renderTile(graphics, scanPos2, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
            if(scanGrace == 1 && localGrace.equals(grace3)) {
                LocalPoint scanPos2 = LocalPoint.fromWorld(client, wp);
                renderTile(graphics, scanPos2, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
            else {//if(!myPos.equals(path3)) {
                renderTile(graphics, LocalPoint.fromWorld(client, 2710, 3489), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }//TARGET3
        }
        //ROOF3(Tightrope)
        if(playerPos.getPlane() == 2 && level2path == 2) {
            if(scanGrace == 1 && localGrace.equals(grace4)) {
                LocalPoint scanPos3 = LocalPoint.fromWorld(client, wp);
                //if(myY < 3481) {
                //if(scanPos3.distanceTo(myPos) >= 5 && myY < 3481) {
                //if(scanPos3.distanceTo(myPos) >= 5) {
                    renderTile(graphics, scanPos3, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
            else {//if(!myPos.equals(path4)) {
                renderTile(graphics, LocalPoint.fromWorld(client, 2710, 3476), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }//TARGET4
        }
        //ROOF4(Jump)
        if(playerPos.getPlane() == 3 && level3path == 2 || movedLevel == 2) {
            renderTile(graphics, LocalPoint.fromWorld(client, 2702, 3469), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
        }//TARGET5
        //ROOF5
        if(playerPos.getPlane() == 2 && level2path == 3) {
            if(scanGrace == 1) {
                LocalPoint scanPos4 = LocalPoint.fromWorld(client, wp);
                renderTile(graphics, scanPos4, config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }
            else {//if(!myPos.equals(path6)) {
                renderTile(graphics, LocalPoint.fromWorld(client, 2703, 3464), config.highlightDestinationColor(), 2, config.highlightHoveredColor());
            }//TARGET6
        }

        return null;
    }

    private void renderTile(final Graphics2D graphics, final LocalPoint dest, final Color color, final double borderWidth, final Color fillColor)
    {
        if (dest == null)
        {
            return;
        }

        final Polygon poly = Perspective.getCanvasTilePoly(client, dest);

        if (poly == null)
        {
            return;
        }

        //OverlayUtil.renderPolygon(graphics, poly, color);
        OverlayUtil.renderPolygon(graphics, poly, color, fillColor, new BasicStroke((float) borderWidth));
    }
}





